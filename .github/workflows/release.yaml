on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release

jobs:
  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false
      - shell: bash
        run: |
          echo UPLOAD_URL=${{ toJson(steps.create_release.outputs.upload_url) }} > upload_url.env

      - name: Upload upload_url.env
        uses: actions/upload-artifact@v1
        with:
          name: upload_url
          path: upload_url.env

  docker-build:
    runs-on: ubuntu-latest
    name: Create Docker 
    steps:
      - uses: actions/checkout@v2

      - uses: mabels/neckless@main
        with:
          version: v0.1.7

      - name: Building
        env:
          NECKLESS_PRIVKEY: ${{ secrets.NECKLESS_PRIVKEY }}
        run: |
          export DOCKER_CONFIG=$HOME/.docker
          eval $(neckless kv ls --ghAddMask  --shKeyValue AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY)
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
          docker build -t s3-streaming-listner:${{ github.sha }} --build-arg VERSION=${{ github.ref }} --build-arg COMMIT=${{ github.sha }} .
          docker tag s3-streaming-listner:${{ github.sha }} public.ecr.aws/d3g6c8d4/s3-streaming-listner:${{ github.ref }})
          docker push public.ecr.aws/d3g6c8d4/s3-streaming-listner:${{ github.ref }}
          docker tag s3-streaming-listner:${{ github.sha }} public.ecr.aws/d3g6c8d4/s3-streaming-listner:latest
          docker push public.ecr.aws/d3g6c8d4/s3-streaming-listner:latest

  build-release:
    name: Build Release ${{ matrix.go }} ${{ join(matrix.platform, ',') }} neckless
    needs: create-release
    strategy:
      matrix:
        #platform: [ubuntu-latest]
        # , macos-latest, windows-latest]
        include:
#        - platform: ['self-hosted', 'linux', 'ARM']
#          path_name: s3-streaming-lister
#          go: '1.17'
#          bin_name: ./s3-streaming-lister-linux-arm
#          asset_name: s3-streaming-lister-linux-arm
#
#        - platform: ['self-hosted', 'linux', 'ARM64']
#          path_name: s3-streaming-lister
#          go: '1.17'
#          bin_name: ./s3-streaming-lister-linux-arm64
#          asset_name: s3-streaming-lister-linux-arm64

        - platform: ubuntu-latest
          path_name: s3-streaming-lister
          go: '1.17'
          bin_name: ./s3-streaming-lister-linux-amd64
          asset_name: s3-streaming-lister-linux-amd64

        - platform: macos-latest
          #['self-hosted', 'macOS', 'X64']
          path_name: s3-streaming-lister
          go: '1.17'
          bin_name: ./s3-streaming-lister-mac
          asset_name: s3-streaming-lister-mac

        - platform: windows-latest
          path_name: s3-streaming-lister.exe
          go: '1.17'
          bin_name: ./s3-streaming-lister-win.exe
          asset_name: s3-streaming-lister-win

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Download upload_url.env
        id: upload_url
        uses: actions/download-artifact@v1
        with:
          name: upload_url
      - shell: bash
        run: |
          cat ./upload_url/upload_url.env > $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go }}

      - name: Build project

        id: build_project
        run: |
          make build BIN_NAME=${{ matrix.bin_name }} VERSION=$(basename ${{ github.ref }})

      - name: Upload Release Asset 
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./${{ matrix.bin_name }}
          asset_name: ${{ matrix.bin_name }}
          asset_content_type: application/golang

